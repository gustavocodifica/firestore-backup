name: Auth Backup

on:
  schedule:
    - cron: "5 6 1 * *" # Todo dia 1Âº do mÃªs Ã s 06:05
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Google Cloud Setup
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Generate Access Token
        run: |
          echo "ACCESS_TOKEN=$(gcloud auth print-access-token)" >> $GITHUB_ENV

      - name: Backup Auth (paginaÃ§Ã£o automÃ¡tica)
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          FILE="auth-backup-$(date +%F).json"
          NEXT_PAGE_TOKEN=""

          echo "[" > $FILE

          while true; do
            echo "ðŸ“¦ Exportando usuÃ¡rios (token: $NEXT_PAGE_TOKEN)"

            RESPONSE=$(curl -s -X POST "https://identitytoolkit.googleapis.com/v1/projects/$PROJECT_ID/accounts:query" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg token "$NEXT_PAGE_TOKEN" '{maxResults: 1000, nextPageToken: $token | select(length > 0)}')")

            USERS=$(echo "$RESPONSE" | jq '.users // []')

            # Adiciona usuÃ¡rios ao arquivo
            echo "$USERS" | jq -c '.[]' | sed 's/$/,/' >> $FILE

            NEXT_PAGE_TOKEN=$(echo "$RESPONSE" | jq -r '.nextPageToken // empty')

            # Se nÃ£o tiver mais pÃ¡gina, sai
            if [ -z "$NEXT_PAGE_TOKEN" ]; then
              break
            fi
          done

          # Fecha o JSON corretamente
          echo "{}]" >> $FILE

          echo "âœ… Backup concluÃ­do. Enviando para o bucket..."
          gsutil cp "$FILE" gs://backup-gclient/backup-auth/$FILE
